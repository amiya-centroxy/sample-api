# Change python version to one thats appropriate for your application.
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- main

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureServiceConnectionId: 'b843e926-887c-44f5-b8d2-892bc2979df8'

  

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Environment name
  environmentName: 'amiya'

  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)

  # Python version: 3.7
  pythonVersion: '3.7'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'
    - script: |
        python -m venv antenv
        source antenv/bin/activate
        python manage.py
        python -m pip install --upgrade pip
        pip install setup
        pip install -r requirements.txt
      workingDirectory: $(projectRoot)
      displayName: "Install requirements"
    
    - task: CopyFiles@2
      displayName: 'Copy Files to artifact staging directory'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        TargetFolder: $(Build.ArtifactStagingDirectory)
    - upload: $(Build.ArtifactStagingDirectory)
      artifact: drop
    
    - task: PublishPipelineArtifact@1
      inputs:
       targetPath: '$(Pipeline.Workspace)'
       artifact: 'drop'
       fileSharePath: 'pipeline'
    
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'drop'
        targetPath: '$(Build.ArtifactStagingDirectory)'
          
  - job: 
  - deployment: VMDeploy
    displayName: web
    environment:
     name: amiya
     resourceType: VirtualMachine
    strategy:
      rolling:
        maxParallel: 2  #for percentages, mention as x%
        preDeploy:
          steps:
          - download: current
            artifact: drop
          - script: echo initialize, cleanup, backup, install certs
        deploy:
          steps:
              - task: PythonScript@0
                inputs:
                  scriptSource: 'inline'
                  script: |
                    python -m venv antenv
                            source antenv/bin/activate
                            python manage.py
                            python -m pip install --upgrade pip
                            pip install setup
                            pip install -r requirements.txt
                  workingDirectory: '$(Build.ArtifactStagingDirectory)'